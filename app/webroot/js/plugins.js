// Generated by CoffeeScript 1.7.1
var _main;

!(function(fn) {
  var f;
  if ('object' === typeof exports && 'undefined' !== typeof module) {
    return module.exports = e();
  } else if ('function' === typeof define && define.amd) {
    return define([], e);
  } else {
    f = void 0;
    if ('undefined' !== typeof window) {
      f = window;
    } else if ('undefined' !== typeof global) {
      f = global;
    } else {
      'undefined' !== typeof self && (f = self);
    }
    return f.tiles = new fn();
  }
})(function() {
  return function(s, columns) {
    var a, c, element, h, i, j, last, max, n, remove, t, tile, tiles, v, w, x, _i, _j, _len, _len1, _results;
    t = document.querySelectorAll(s);
    element = typeof HTMLElement !== "undefined" ? HTMLElement : Element;
    n = 0;
    for (_i = 0, _len = t.length; _i < _len; _i++) {
      v = t[_i];
      if (v instanceof element) {
        ++n;
      } else {
        +0;
      }
    }
    if (n !== t.length) {
      return console.log("this string is not documetnt query");
    } else {
      tiles = void 0;
      tile = void 0;
      max = 0;
      c = void 0;
      h = void 0;
      remove = void 0;
      s = document.body.style;
      a = ['height'];
      last = t.length - 1;
      columns = !columns ? t.length : columns;
      remove = s.removeProperty ? s.removeProperty : s.removeAttribute;
      _results = [];
      for (i = _j = 0, _len1 = t.length; _j < _len1; i = ++_j) {
        w = t[i];
        remove.apply(w.style, a);
        c = i % columns;
        if (c === 0) {
          tiles = [];
        }
        tile = tiles[c] = w;
        h = tile.offsetHeight;
        if (c === 0 || h > max) {
          max = h;
        }
        if (i === last || c === columns - 1) {
          _results.push((function() {
            var _k, _len2, _results1;
            _results1 = [];
            for (j = _k = 0, _len2 = tiles.length; _k < _len2; j = ++_k) {
              x = tiles[j];
              _results1.push(x.style.height = max + "px");
            }
            return _results1;
          })());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };
});

_main = (function() {
  var outerWidth;

  function _main() {}

  _main.prototype.addEvent = function(element, event, fn) {
    if (element.addEventListener) {
      element.addEventListener(event, fn, false);
    } else {
      if (element.attachEvent) {
        element.attachEvent("on" + event, fn);
      }
    }
  };

  _main.prototype.s = function(selector) {
    return document.querySelector(selector);
  };

  _main.prototype.sa = function(selector) {
    return document.querySelectorAll(selector);
  };

  _main.prototype.t = function(tagname) {
    return document.getElementsByTagName(tagname);
  };

  _main.prototype.c = function(cl) {
    return document.getElementsByClassName(cl);
  };

  _main.prototype.i = function(idname) {
    return document.getElementById(idname);
  };

  _main.prototype.addClass = function(el, className) {
    if (el.classList) {
      return el.classList.add(className);
    } else {
      return el.className += ' ' + className;
    }
  };

  _main.prototype.removeClass = function(el, className) {
    if (el.classList) {
      return el.classList.remove(className);
    } else {
      return el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
    }
  };

  _main.prototype.fadeIn = function(el, dur) {
    var last, tick;
    el.style.opacity = 0;
    if (!dur) {
      dur = 400;
    }
    last = +new Date();
    tick = function() {
      el.style.display = '';
      el.style.opacity = +el.style.opacity + (new Date() - last) / dur;
      last = +new Date();
      if (+el.style.opacity < 1) {
        (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);
      }
    };
    tick();
  };

  _main.prototype.fadeOut = function(el, dur) {
    var last, tick;
    el.style.opacity = 0;
    if (!dur) {
      dur = 400;
    }
    last = +new Date();
    el.style.opacity = 1;
    tick = function() {
      el.style.display = '';
      el.style.opacity = +el.style.opacity - (new Date() - last) / dur;
      last = +new Date();
      if (el.style.opacity > 0) {
        (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);
      } else {
        el.style.display = 'none';
      }
    };
    tick();
  };

  _main.prototype.ajax = function() {
    var resp, that;
    that = this;
    resp = null;
    return function(url, xml) {
      var request;
      request = new XMLHttpRequest();
      request.open("GET", url, true);
      request.onload = function() {
        if (request.status >= 200 && request.status < 400) {
          if (!(xml === "text")) {
            return resp = request.responseXML;
          } else {
            return resp = request.responseText;
          }
        } else {

        }
      };
      request.onerror = function() {
        console.log(resp);
      };
      request.send();
      return resp;
    };
  };

  _main.prototype.setCookie = function(data, period) {
    var cookies, expire, key;
    cookies = "";
    for (key in data) {
      cookies += key + "=" + encodeURIComponent(data[key]) + ";";
    }
    expire = new Date();
    expire.setTime(expire.getTime() + 1000 * 3600 * 24 * period);
    expire.toUTCString();
    cookies += "expires=" + expire + ";";
    document.cookie = cookies;
  };

  _main.prototype.getCookie = function(data) {
    var cookie, cookieArray, cookies, i, result, result_data;
    result = [];
    cookies = document.cookie;
    result_data = null;
    if (cookies !== "") {
      cookieArray = cookies.split(";");
      i = 0;
      while (i < cookieArray.length) {
        cookie = cookieArray[i].split("=");
        result[cookie[0]] = decodeURIComponent(cookie[1]);
        i++;
      }
    }
    return result;
  };

  _main.prototype.outerHeight = function(el) {
    var height, mb, mt, style;
    height = el.offsetHeight;
    style = getComputedStyle(el);
    mt = 0;
    mb = 0;
    if (parseInt(style.marginTop)) {
      mt = parseInt(style.marginTop);
    }
    if (parseInt(style.marginBottom)) {
      mb = parseInt(style.marginBottom);
    }
    height += mt + mb;
    return height;
  };

  outerWidth = function(el) {
    var style, width;
    width = el.offsetWidth;
    style = getComputedStyle(el);
    width += parseInt(style.marginLeft) + parseInt(style.marginRight);
    return width;
  };

  return _main;

})();
